snippet turtle "A quick start for little turtle program" !b
import turtle
def make_window(color, title):
	wn = turtle.Screen()
	wn.bgcolor(color)
	wn.title(title)

	return wn

def make_turtle(color, size):
	t = turtle.Turtle()
	t.color(color)
	t.pensize(size)

	return t
window = make_window("lightgreen", "Application")
eric = make_turtle("red", 5)

endsnippet
snippet test "Boil down template for test suit" !b
import sys
def test(did_pass):
	""" Print the result of a test """
	linenum = sys._getframe(1).f_lineno
	if(did_pass):
		msg = "Test at line {0} OK".format(linenum)
	else:
		msg = "Test at line {0} Failed".format(linenum)
	print(msg)
endsnippet

snippet template "Python little program template" !b
if __name__ == '__main__':
	${1:function_call()}
endsnippet

snippet bug "Add a bug sign" b


#	Bug: Needs to be fixed: 
#   Introcuded By:  `echo $USER` 
#	Time: `!v strftime("%c")`
#	Attention: For Next Time Fix
#

endsnippet

snippet todo "TODO Reminder" !b
#TODO ${1:"Misisng Module: Keep it small and elegent"}
endsnippet

snippet py "python template" !b
#! /usr/bin/python3
# Desc: ${1:"Something Meaningful"}
# DateTime: `date "+%Y-%m-%d %H:%M"`
# Creator: `echo $USER`
endsnippet

snippet class "template for class in python" !b
class ${1:Classname}:
	# Constructors
	def __init__(self):
	
	# Getter and Setter

	# Operations
endsnippet

snippet main "Unit_test" !b
if __name__ == '__main__':
	${1:unit_test()}
endsnippet

snippet s "setter method" !b
def set_${1:"var"}(self, $1):
	self._$1 = $1 
endsnippet

snippet g "getter method" !b
def get_${1:"var"}(self):
	return self._$1
endsnippet
